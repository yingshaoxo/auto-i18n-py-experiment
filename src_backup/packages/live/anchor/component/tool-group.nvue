<template>
	<view class="tool-group">
		<view class="mode-box" v-if="active == 'mode'">
			<text class="mode-box-text" @click="selectMode('SD')" :class="params.mode == 'SD' ? 'active' : ''">標清</text>
			<text class="mode-box-text" @click="selectMode('HD')" :class="params.mode == 'HD' ? 'active' : ''">高清</text>
			<text class="mode-box-text" @click="selectMode('FHD')" :class="params.mode == 'FHD' ? 'active' : ''">超清</text>
		</view>
		<view class="slider-box" v-if="show">
			<text class="slider-box-text">{{ sliderInfo.text }}</text>
			<slider class="slider" :value="sliderInfo.value" :block-size="20" :max="9" @change="sliderChange" />
			<text class="slider-box-text">{{ sliderInfo.value }}</text>
		</view>
		<view class="tool">
			<view class="tool-title">直播工具</view>
			<view class="tool-box">
				<view class="tool-box-item" v-for="(item,index) in items" :key="index" @click="onToolClick(item,index)">
					<view class="tool-box_item__img"></view><text class="tool-box_item__text">{{item.title}}</text>
				</view>
			</view>
		</view>
	</view>
	</view>
</template>

<script>
	// 默認工具參數
	const defOption = {
		mode: "SD", //視頻模式 SD（標清）, HD（高清）, FHD（超清）
		beauty: 5, //美顏
		whiteness: 5, //美白
		devicePosition: "front", //前置front或後置back
		enableMic: true //麥克風
	};
	export default {
		data() {
			return {
				active: "",
				index: 0,
				show: false
			};
		},
		props: {
			value: {
				type: Object,
				default: () => ({ ...defOption
				})
			}
		},
		computed: {
			params: {
				get() {
					return this.value;
				},
				set(e) {
					console.log(e);
				}
			},
			items() {
				let params = this.params;
				let arr = [{
						icon: "v-icon-flip",
						action: "devicePosition",
						title: "切換鏡頭"
					},
					{
						icon: "v-icon-stick",
						action: "beauty",
						slider: true,
						title: "美顏"
					},
					{
						icon: "v-icon-girl",
						action: "whiteness",
						slider: true,
						title: "美白"
					},
					{
						icon: "v-icon-yuan-02",
						action: "mode",
						title: "清晰度"
					},
					{
						icon: params.enableMic ? "v-icon-wheat" : "v-icon-no-wheat",
						action: "enableMic",
						title: "靜音"
					}
				];
				return arr;
			},
			sliderInfo() {
				const item = this.items[this.index];
				let value =
					this.show && this.params[this.active] ? this.params[this.active] : 0;
				return {
					text: item.title,
					value: value
				};
			}
		},
		methods: {
			sliderChange({
				detail
			}) {
				const {
					value
				} = detail;
				this.params[this.active] = value;
				this.onChange();
			},
			selectMode(mode) {
				this.params.mode = mode;
				this.onChange();
			},
			onToolClick(e, index) {
				const item = this.items[index];
				this.index = index;
				this.active = item.action;
				this.show = !!e.slider;
				if (item.action == "devicePosition") {
					this.params.devicePosition =
						this.params.devicePosition == "front" ? "back" : "front";
					this.onChange();
				}
				if (item.action == "enableMic") {
					this.params.enableMic = !this.params.enableMic;
					this.onChange();
				}
			},
			onChange() {
				this.$emit("input", this.params);
				this.$emit("change", this.params);
			}
		}
	};
</script>

<style lang="scss" scoped>
	.slider-box {
		position: absolute;
		top: 0;
		z-index: 1;
		width: 710rpx;
		margin: 20rpx;
		padding: $cell-padding;
		background-color: #ffffff;
		border-radius: 20rpx;
		align-items: center;
		flex-direction: row;
		justify-content: space-between;
		height: 116rpx;
	}

	.tool-group {
		position: relative;
		padding-top: 126rpx;
	}

	.slider {
		flex: 1;
	}

	.slider-box-text {
		font-size: $font-size;
	}

	.mode-box {
		position: absolute;
		top: 0;
		z-index: 1;
		width: 710rpx;
		margin: 20rpx;
		padding: $cell-padding;
		background-color: #ffffff;
		border-radius: 20rpx;
		align-items: center;
		height: 116rpx;
		flex-direction: row;
		justify-content: space-between;
	}

	.mode-box-text {
		font-size: $font-size;
	}


	.tool {
		width: 710rpx;
		margin: 20rpx;
		background-color: #FFFFFF;
		border-radius: 20rpx;
		overflow: hidden;
	}

	.tool-title {
		padding: $cell-padding;
		font-size: $font-size;
		color: $text-color;
	}

	.tool-box {
		flex-direction: row;
		flex-wrap: wrap;
		width: 710rpx;
		padding: 20rpx 0;
	}

	.tool-box-item {
		width: 177.5rpx;
		height: 120rpx;
		align-items: center;
		justify-content: center;
		padding: 20rpx 20rpx;
	}

	.tool-box_item__img {
		// width: 64rpx;
		// height: 64rpx;
		background-color: rgba(0, 0, 0, 0.5);
	}

	.tool-box_item__text {
		color: $text-color;
		font-size: $font-size;
	}

	.active {
		color: $red;
		font-weight: 800;
	}
</style>
